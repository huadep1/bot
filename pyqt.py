# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sys
import os
import playsound
import speech_recognition as sr
import time
import sys
import ctypes
import wikipedia
import datetime
import json
import re
import webbrowser
import smtplib
import requests
import urllib
import urllib.request as urllib2
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from webdriver_manager.chrome import ChromeDriverManager
from time import strftime
from gtts import gTTS
from youtube_search import YoutubeSearch
import threading
wikipedia.set_lang('vi')
language = 'vi'
path = ChromeDriverManager().install()
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(637, 271)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(10, 110, 621, 71))
        self.label.setFrameShape(QtWidgets.QFrame.Box)
        self.label.setObjectName("label")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(210, 10, 171, 91))
        self.pushButton.setText("")
        self.pushButton.setObjectName("pushButton")
        rMyIcon = QtGui.QPixmap("microphone-342 (1).png");
        self.pushButton.setIcon(QtGui.QIcon(rMyIcon))
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(10, 190, 621, 71))
        self.label_2.setFrameShape(QtWidgets.QFrame.Box)
        self.label_2.setObjectName("label_2")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:10pt; font-weight:600;\"></span></p></body></html>"))
        self.label_2.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:10pt; font-weight:600;\"></span></p></body></html>"))
        self.pushButton.pressed.connect(self.working)

    def working(self):
        self.startbot = working(self)
        self.startbot.start()
class working(QtCore.QThread):
    toi = QtCore.pyqtSignal(str)
    bot = QtCore.pyqtSignal(str)
    def __init__(self, a):
        super().__init__()
        self.a = a
        self.toi.connect(self.a.label.setText)
        self.bot.connect(self.a.label_2.setText)

    def run(self):
        threading.Thread(target=self.assistant, args=()).start()
        

    def speak(self, text):
        self.bot.emit("<html><head/><body><p><span style=\" font-size:10pt; font-weight:600;\">Bot: {}</span></p></body></html>".format(text))
        tts = gTTS(text=text, lang=language, slow=False)
        tts.save("sound.mp3")
        playsound.playsound("sound.mp3", False)
        os.remove("sound.mp3")

    def get_audio(self):
        r = sr.Recognizer()
        with sr.Microphone() as source:
            print("Tôi: ", end='')
            self.toi.emit("<html><head/><body><p><span style=\" font-size:10pt; font-weight:600;\">Tôi: </span></p></body></html>")
            audio = r.listen(source, phrase_time_limit=5)
            try:
                text = r.recognize_google(audio, language="vi-VN")
                print(text)
                self.toi.emit("<html><head/><body><p><span style=\" font-size:10pt; font-weight:600;\">Tôi: {}</span></p></body></html>".format(text))
                return text
            except:
                print("...")
                self.toi.emit("<html><head/><body><p><span style=\" font-size:10pt; font-weight:600;\">Tôi: ...</span></p></body></html>")
                return 0


    def stop(self):
        self.speak("Hẹn gặp lại bạn sau!")

    def get_text(self):
        for i in range(3):
            text = self.get_audio()
            if text:
                return text.lower()
            elif i < 2:
                self.speak("Bot không nghe rõ. Bạn nói lại được không!")
        time.sleep(2)
        self.stop()
        return 0

    def hello(self, name):
        day_time = int(strftime('%H'))
        if day_time < 12:
            self.speak("Chào buổi sáng bạn {}. Chúc bạn một ngày tốt lành.".format(name))
        elif 12 <= day_time < 18:
            self.speak("Chào buổi chiều bạn {}. Bạn đã dự định gì cho chiều nay chưa.".format(name))
        else:
            self.speak("Chào buổi tối bạn {}. Bạn đã ăn tối chưa nhỉ.".format(name))

    def open_application(self, text):
        if "google" in text:
            self.speak("Mở Google Chrome")
            os.startfile(
                '"C:\Program Files\Google\Chrome\Application\chrome.exe"')
        elif "word" in text:
            self.speak("Mở Microsoft Word")
            os.startfile(
                'C:\Program Files\Microsoft Office\\root\Office16\\WINWORD.EXE')
        elif "excel" in text:
            self.speak("Mở Microsoft Excel")
            os.startfile(
                'C:\Program Files\Microsoft Office\\root\Office16\EXCEL.EXE')
        else:
            self.speak("Ứng dụng chưa được cài đặt. Bạn hãy thử lại!")


    def open_website(self, text):
        reg_ex = re.search('mở (.+)', text)
        if reg_ex:
            domain = reg_ex.group(1)
            url = 'https://www.' + domain
            webbrowser.open(url)
            self.speak("Trang web bạn yêu cầu đã được mở.")
            return True
        else:
            return False


    def open_google_and_search(self, text):
        search_for = text.split("kiếm", 1)[1]
        self.speak('Okay!')
        driver = webdriver.Chrome(path)
        driver.get("https://www.google.com")
        que = driver.find_element_by_xpath("//input[@name='q']")
        que.send_keys(str(search_for))
        que.send_keys(Keys.RETURN)


    def send_email(self, text):
        self.speak('Bạn gửi email cho ai nhỉ')
        recipient = self.get_text()
        if 'yến' in recipient:
            self.speak('Nội dung bạn muốn gửi là gì')
            content = self.get_text()
            mail = smtplib.SMTP('smtp.gmail.com', 587)
            mail.ehlo()
            mail.starttls()
            mail.login('luongngochungcntt@gmail.com', 'hung23081997')
            mail.sendmail('luongngochungcntt@gmail.com',
                        'hungdhv97@gmail.com', content.encode('utf-8'))
            mail.close()
            self.speak('Email của bạn vùa được gửi. Bạn check lại email nhé hihi.')
        else:
            self.speak('Bot không hiểu bạn muốn gửi email cho ai. Bạn nói lại được không?')


    def current_weather(self):
        self.speak("Bạn muốn xem thời tiết ở đâu ạ.")
        ow_url = "http://api.openweathermap.org/data/2.5/weather?"
        city = self.get_text()
        if not city:
            pass
        api_key = "fe8d8c65cf345889139d8e545f57819a"
        call_url = ow_url + "appid=" + api_key + "&q=" + city + "&units=metric"
        response = requests.get(call_url)
        data = response.json()
        if data["cod"] != "404":
            city_res = data["main"]
            current_temperature = city_res["temp"]
            current_pressure = city_res["pressure"]
            current_humidity = city_res["humidity"]
            suntime = data["sys"]
            sunrise = datetime.datetime.fromtimestamp(suntime["sunrise"])
            sunset = datetime.datetime.fromtimestamp(suntime["sunset"])
            wthr = data["weather"]
            weather_description = wthr[0]["description"]
            now = datetime.datetime.now()
            content = """
            Hôm nay là ngày {day} tháng {month} năm {year}
            Mặtinset} phút
            Nhiệt độ trung bình là trời mọc vào {hourrise} giờ {minrise} phút
            Mặt trời lặn vào {hourset} giờ {m {temp} độ C
            Áp suất không khí là {pressure} héc tơ Pascal
            Độ ẩm là {humidity}%
            Trời hôm nay quang mây. Dự báo mưa rải rác ở một số nơi.""".format(day = now.day,month = now.month, year= now.year, hourrise = sunrise.hour, minrise = sunrise.minute,
                                                                            hourset = sunset.hour, minset = sunset.minute, 
                                                                            temp = current_temperature, pressure = current_pressure, humidity = current_humidity)
            self.speak(content)
            time.sleep(20)
        else:
            self.speak("Không tìm thấy địa chỉ của bạn")

    def play_song(self):
        self.speak('Xin mời bạn chọn tên bài hát')
        mysong = self.get_text()
        while True:
            result = YoutubeSearch(mysong, max_results=10).to_dict()
            if result:
                break
        url = 'https://www.youtube.com' + result[0]['url_suffix']
        webbrowser.open(url)
        self.speak("Bài hát bạn yêu cầu đã được mở.")

    def change_wallpaper(self):
        api_key = 'RF3LyUUIyogjCpQwlf-zjzCf1JdvRwb--SLV6iCzOxw'
        url = 'https://api.unsplash.com/photos/random?client_id=' + \
            api_key  # pic from unspalsh.com
        f = urllib2.urlopen(url)
        json_string = f.read()
        f.close()
        parsed_json = json.loads(json_string)
        photo = parsed_json['urls']['full']
        # Location where we download the image to.
        urllib2.urlretrieve(photo, "C:/Users/Night Fury/Downloads/a.png")
        image=os.path.join("C:/Users/Night Fury/Downloads/a.png")
        ctypes.windll.user32.SystemParametersInfoW(20,0,image,3)
        self.speak('Hình nền máy tính vừa được thay đổi')


    def read_news(self):
        self.speak("Bạn muốn đọc báo về gì")
        
        queue = self.get_text()
        params = {
            'apiKey': '30d02d187f7140faacf9ccd27a1441ad',
            "q": queue,
        }
        api_result = requests.get('http://newsapi.org/v2/top-headlines?', params)
        api_response = api_result.json()
        print("Tin tức")

        for number, result in enumerate(api_response['articles'], start=1):
            print(f"""Tin {number}:\nTiêu đề: {result['title']}\nTrích dẫn: {result['description']}\nLink: {result['url']}
        """)
            if number <= 3:
                webbrowser.open(result['url'])

    def tell_me_about(self):
        try:
            self.speak("Bạn muốn nghe về gì ạ")
            text = self.get_text()
            contents = wikipedia.summary(text).split('\n')
            self.speak(contents[0])
            time.sleep(10)
            for content in contents[1:]:
                self.speak("Bạn muốn nghe thêm không")
                ans = self.get_text()
                if "có" not in ans:
                    break    
                self.speak(content)
                time.sleep(10)

            self.speak('Cảm ơn bạn đã lắng nghe!!!')
        except:
            self.speak("Bot không định nghĩa được thuật ngữ của bạn. Xin mời bạn nói lại")

    def help_me(self):
        self.speak("""Bot có thể giúp bạn thực hiện các câu lệnh sau đây:
        1. Chào hỏi
        2. Hiển thị giờ
        3. Mở website, application
        4. Tìm kiếm trên Google
        5. Gửi email
        6. Dự báo thời tiết
        7. Mở video nhạc
        8. Thay đổi hình nền máy tính
        9. Đọc báo hôm nay
        10. Kể bạn biết về thế giới """)
        time.sleep(20)

    def assistant(self):
        self.speak("Xin chào, bạn tên là gì nhỉ?")
        name = self.get_text()
        self.toi.emit("<html><head/><body><p><span style=\" font-size:10pt; font-weight:600;\">Tôi: {}</span></p></body></html>".format(name))
        time.sleep(0.5)
        # name = "Đoàn Văn Hậu"
        if name:
            self.speak("Chào bạn {}".format(name))
            time.sleep(1)
            self.speak("Bạn cần Bot Alex có thể giúp gì ạ?")
            while True:
                global text
                text = self.get_text()
                if not text:
                    break
                elif "dừng" in text or "tạm biệt" in text or "chào robot" in text or "ngủ thôi" in text:
                    self.stop()
                    break
                elif "có thể làm gì" in text:
                    self.help_me()
                elif "chào trợ lý ảo" in text:
                    self.hello(name)
                elif "hiện tại" in text:
                    self.get_time(text)
                elif "mở" in text:
                    if 'mở google và tìm kiếm' in text:
                        self.open_google_and_search(text)
                    elif "." in text:
                        self.open_website(text)
                    else:
                        self.open_application(text)
                elif "email" in text or "mail" in text or "gmail" in text:
                    self.send_email(text)
                elif "thời tiết" in text:
                    self.current_weather()
                elif "chơi nhạc" in text:
                    self.play_song()
                elif "hình nền" in text:
                    self.change_wallpaper()
                elif "đọc báo" in text:
                    self.read_news()
                elif "định nghĩa" in text:
                    self.tell_me_about()
                else:
                    self.speak("Bạn cần Bot giúp gì ạ?")


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
